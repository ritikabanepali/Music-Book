{"ast":null,"code":"import axios from 'axios'; // makes HTTP requests from browser to API\n\n// axios.get('http://127.0.0.1:8000/api/reviews') to => apiClient.get('/reviews')\nconst apiClient = axios.create({\n  baseURL: 'http://127.0.0.1:8000/api'\n});\n\n// automatically adds the Authorization header to every request\napiClient.interceptors.request.use(config => {\n  // request inceptor before a request is sent\n  const token = localStorage.getItem('accessToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport default apiClient;","map":{"version":3,"names":["axios","apiClient","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject"],"sources":["/Users/ritikabanepali/Full Spotify Project/frontend/src/api.js"],"sourcesContent":["import axios from 'axios'; // makes HTTP requests from browser to API\n\n// axios.get('http://127.0.0.1:8000/api/reviews') to => apiClient.get('/reviews')\nconst apiClient = axios.create({\n    baseURL: 'http://127.0.0.1:8000/api', \n});\n\n// automatically adds the Authorization header to every request\napiClient.interceptors.request.use(config => { // request inceptor before a request is sent\n    const token = localStorage.getItem('accessToken');\n    if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n}, error => {\n    return Promise.reject(error);\n});\n\nexport default apiClient;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO,CAAC,CAAC;;AAE3B;AACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC3BC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACAF,SAAS,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EAAE;EAC3C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EACjD,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EACpD;EACA,OAAOD,MAAM;AACjB,CAAC,EAAEM,KAAK,IAAI;EACR,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;AAEF,eAAeZ,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}